{
  "_args": [
    [
      {
        "raw": "d3-color@~0.3.2",
        "scope": null,
        "escapedName": "d3-color",
        "name": "d3-color",
        "rawSpec": "~0.3.2",
        "spec": ">=0.3.2 <0.4.0",
        "type": "range"
      },
      "C:\\xampp\\htdocs\\BACHELOR\\bachelor\\node_modules\\d3-sankey-align\\node_modules\\d3-interpolate"
    ]
  ],
  "_from": "d3-color@>=0.3.2 <0.4.0",
  "_id": "d3-color@0.3.4",
  "_inCache": true,
  "_location": "/d3-sankey-align/d3-color",
  "_nodeVersion": "5.4.0",
  "_npmUser": {
    "name": "mbostock",
    "email": "mbostock@gmail.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "d3-color@~0.3.2",
    "scope": null,
    "escapedName": "d3-color",
    "name": "d3-color",
    "rawSpec": "~0.3.2",
    "spec": ">=0.3.2 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/d3-sankey-align/d3-interpolate"
  ],
  "_resolved": "https://registry.npmjs.org/d3-color/-/d3-color-0.3.4.tgz",
  "_shasum": "eba2fa9532513998b623a077c3b5149cb1df53d7",
  "_shrinkwrap": null,
  "_spec": "d3-color@~0.3.2",
  "_where": "C:\\xampp\\htdocs\\BACHELOR\\bachelor\\node_modules\\d3-sankey-align\\node_modules\\d3-interpolate",
  "author": {
    "name": "Mike Bostock",
    "url": "http://bost.ocks.org/mike"
  },
  "bugs": {
    "url": "https://github.com/d3/d3-color/issues"
  },
  "dependencies": {},
  "description": "Color spaces! RGB, HSL, Cubehelix, Lab and HCL (Lch).",
  "devDependencies": {
    "faucet": "0.0",
    "rollup": "0.25",
    "tape": "4",
    "uglify-js": "2"
  },
  "directories": {},
  "dist": {
    "shasum": "eba2fa9532513998b623a077c3b5149cb1df53d7",
    "tarball": "https://registry.npmjs.org/d3-color/-/d3-color-0.3.4.tgz"
  },
  "gitHead": "aca847141f780b7357c1b0e2a28d18d25b31f202",
  "homepage": "https://github.com/d3/d3-color",
  "jsnext:main": "index",
  "keywords": [
    "d3",
    "color",
    "rgb",
    "hsl",
    "lab",
    "hcl",
    "lch",
    "cubehelix"
  ],
  "license": "BSD-3-Clause",
  "main": "build/d3-color.js",
  "maintainers": [
    {
      "name": "mbostock",
      "email": "mike@ocks.org"
    }
  ],
  "name": "d3-color",
  "optionalDependencies": {},
  "readme": "# d3-color\n\nEven though your browser understands a lot about colors, it doesn’t offer much help in manipulating colors through JavaScript. The d3-color module therefore provides representations for various color spaces, allowing specification, conversion and manipulation. (Also see [d3-interpolate](https://github.com/d3/d3-interpolate) for color interpolation.)\n\nFor example, take the color named “steelblue”:\n\n```js\nvar c = d3.color(\"steelblue\"); // {r: 70, g: 130, b: 180}\n```\n\nLet’s try converting it to HSL:\n\n```js\nvar c = d3.hsl(\"steelblue\"); // {h: 207.27272727272728, s: 0.44, l: 0.4901960784313726}\n```\n\nNow rotate the hue by 90°, bump up the saturation, and format as hex:\n\n```js\nc.h += 90;\nc.s += 0.2;\nc + \"\"; // #c62dcd\n```\n\nIn addition to the ubiquitous and machine-friendly [RGB](#rgb) and [HSL](#hsl) color space, d3-color supports two color spaces that are designed for humans:\n\n* Dave Green’s [Cubehelix](#cubehelix)\n* [Lab (CIELAB)](#lab) and [HCL (CIELCH)](#hcl)\n\nCubehelix features monotonic lightness, while Lab and HCL are perceptually uniform. Note that HCL is the cylindrical form of Lab, similar to how HSL is the cylindrical form of RGB.\n\n## Installing\n\nIf you use NPM, `npm install d3-color`. Otherwise, download the [latest release](https://github.com/d3/d3-color/releases/latest). The released bundle supports AMD, CommonJS, and vanilla environments. Create a custom build using [Rollup](https://github.com/rollup/rollup) or your preferred bundler. You can also load directly from [d3js.org](https://d3js.org):\n\n```html\n<script src=\"https://d3js.org/d3-color.v0.3.min.js\"></script>\n```\n\nIn a vanilla environment, a `d3_color` global is exported. [Try d3-color in your browser.](https://tonicdev.com/npm/d3-color)\n\n## API Reference\n\n<a name=\"color\" href=\"#color\">#</a> d3.<b>color</b>(<i>specifier</i>)\n\nParses the specified [CSS Color Module Level 3](http://www.w3.org/TR/css3-color/#colorunits) *specifier* string, returning an [RGB](#rgb) or [HSL](#hsl) color. If the specifier was not valid, null is returned. Some examples:\n\n* `\"rgb(255,255,255)\"`\n* `\"hsl(120,50%,20%)\"`\n* `\"#ffeeaa\"`\n* `\"#fea\"`\n* `\"steelblue\"`\n\nThe list of supported [named colors](http://www.w3.org/TR/SVG/types.html#ColorKeywords) is specified by CSS.\n\nNote: this function may also be used with `instanceof` to test if an object is a color instance. The same is true of color subclasses, allowing you to test whether a color is in a particular color space.\n\n<a name=\"color_rgb\" href=\"#color_rgb\">#</a> *color*.<b>rgb</b>()\n\nReturns the [RGB equivalent](#rgb) of this color. For RGB colors, that’s `this`.\n\n<a name=\"color_brighter\" href=\"#color_brighter\">#</a> *color*.<b>brighter</b>([<i>k</i>])\n\nReturns a brighter copy of this color. If *k* is specified, it controls how much brighter the returned color should be. If *k* is not specified, it defaults to 1. The behavior of this method is dependent on the implementing color space.\n\n<a name=\"color_darker\" href=\"#color_darker\">#</a> *color*.<b>darker</b>([<i>k</i>])\n\nReturns a darker copy of this color. If *k* is specified, it controls how much brighter the returned color should be. If *k* is not specified, it defaults to 1. The behavior of this method is dependent on the implementing color space.\n\n<a name=\"color_displayable\" href=\"#color_displayable\">#</a> *color*.<b>displayable</b>()\n\nReturns true if and only if the color is displayable on standard hardware. For example, this returns false for an RGB color if any channel value is less than zero or greater than 255.\n\n<a name=\"color_toString\" href=\"#color_toString\">#</a> *color*.<b>toString</b>()\n\nReturns the RGB hexadecimal string representing this color, such as `\"#f7eaba\"`. If this color is not displayable, a suitable displayable color is returned instead. For example, RGB channel values greater than 255 are clamped to 255.\n\n<a name=\"rgb\" href=\"#rgb\">#</a> d3.<b>rgb</b>(<i>r</i>, <i>g</i>, <i>b</i>)<br>\n<a href=\"#rgb\">#</a> d3.<b>rgb</b>(<i>specifier</i>)<br>\n<a href=\"#rgb\">#</a> d3.<b>rgb</b>(<i>color</i>)<br>\n\nConstructs a new [RGB](https://en.wikipedia.org/wiki/RGB_color_model) color. The channel values are exposed as `r`, `g` and `b` properties on the returned instance. Use the [RGB color picker](http://bl.ocks.org/mbostock/78d64ca7ef013b4dcf8f) to explore this color space.\n\nIf *r*, *g* and *b* are specified, these represent the channel values of the returned color. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the RGB color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb). Note that unlike [*color*.rgb](#color_rgb) this method *always* returns a new instance, even if *color* is already an RGB color.\n\n<a name=\"hsl\" href=\"#hsl\">#</a> d3.<b>hsl</b>(<i>h</i>, <i>s</i>, <i>l</i>)<br>\n<a href=\"#hsl\">#</a> d3.<b>hsl</b>(<i>specifier</i>)<br>\n<a href=\"#hsl\">#</a> d3.<b>hsl</b>(<i>color</i>)<br>\n\nConstructs a new [HSL](https://en.wikipedia.org/wiki/HSL_and_HSV) color. The channel values are exposed as `h`, `s` and `l` properties on the returned instance. Use the [HSL color picker](http://bl.ocks.org/mbostock/debaad4fcce9bcee14cf) to explore this color space.\n\nIf *h*, *s* and *l* are specified, these represent the channel values of the returned color. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the HSL color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb) and then converted to HSL. (Colors already in the HSL color space skip the conversion to RGB.)\n\n<a name=\"lab\" href=\"#lab\">#</a> d3.<b>lab</b>(<i>l</i>, <i>a</i>, <i>b</i>)<br>\n<a href=\"#lab\">#</a> d3.<b>lab</b>(<i>specifier</i>)<br>\n<a href=\"#lab\">#</a> d3.<b>lab</b>(<i>color</i>)<br>\n\nConstructs a new [Lab](https://en.wikipedia.org/wiki/Lab_color_space#CIELAB) color. The channel values are exposed as `l`, `a` and `b` properties on the returned instance. Use the [Lab color picker](http://bl.ocks.org/mbostock/9f37cc207c0cb166921b) to explore this color space.\n\nIf *l*, *a* and *b* are specified, these represent the channel values of the returned color. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the Lab color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb) and then converted to Lab. (Colors already in the Lab color space skip the conversion to RGB, and colors in the HCL color space are converted directly to Lab.)\n\n<a name=\"hcl\" href=\"#hcl\">#</a> d3.<b>hcl</b>(<i>h</i>, <i>c</i>, <i>l</i>)<br>\n<a href=\"#hcl\">#</a> d3.<b>hcl</b>(<i>specifier</i>)<br>\n<a href=\"#hcl\">#</a> d3.<b>hcl</b>(<i>color</i>)<br>\n\nConstructs a new [HCL](https://en.wikipedia.org/wiki/Lab_color_space#CIELAB) color. The channel values are exposed as `h`, `c` and `l` properties on the returned instance. Use the [HCL color picker](http://bl.ocks.org/mbostock/3e115519a1b495e0bd95) to explore this color space.\n\nIf *h*, *c* and *l* are specified, these represent the channel values of the returned color. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the HCL color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb) and then converted to HCL. (Colors already in the HCL color space skip the conversion to RGB, and colors in the Lab color space are converted directly to HCL.)\n\n<a name=\"cubehelix\" href=\"#cubehelix\">#</a> d3.<b>cubehelix</b>(<i>h</i>, <i>s</i>, <i>l</i>)<br>\n<a href=\"#cubehelix\">#</a> d3.<b>cubehelix</b>(<i>specifier</i>)<br>\n<a href=\"#cubehelix\">#</a> d3.<b>cubehelix</b>(<i>color</i>)<br>\n\nConstructs a new [Cubehelix](https://www.mrao.cam.ac.uk/~dag/CUBEHELIX/) color. The channel values are exposed as `h`, `s` and `l` properties on the returned instance. Use the [Cubehelix color picker](http://bl.ocks.org/mbostock/ba8d75e45794c27168b5) to explore this color space.\n\nIf *h*, *s* and *l* are specified, these represent the channel values of the returned color. If a CSS Color Module Level 3 *specifier* string is specified, it is parsed and then converted to the Cubehelix color space. See [color](#color) for examples. If a [*color*](#color) instance is specified, it is converted to the RGB color space using [*color*.rgb](#color_rgb) and then converted to Cubehelix. (Colors already in the Cubehelix color space skip the conversion to RGB.)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/d3/d3-color.git"
  },
  "scripts": {
    "postpublish": "VERSION=`node -e 'console.log(require(\"./package.json\").version)'`; git push && git tag -am \"Release $VERSION.\" v${VERSION} && git push --tags && cp build/d3-color.js ../d3.github.com/d3-color.v0.3.js && cp build/d3-color.min.js ../d3.github.com/d3-color.v0.3.min.js && cd ../d3.github.com && git add d3-color.v0.3.js d3-color.v0.3.min.js && git commit -m \"d3-color ${VERSION}\" && git push",
    "prepublish": "npm run test && uglifyjs build/d3-color.js -c -m -o build/d3-color.min.js && rm -f build/d3-color.zip && zip -j build/d3-color.zip -- LICENSE README.md build/d3-color.js build/d3-color.min.js",
    "pretest": "mkdir -p build && node -e 'process.stdout.write(\"var version = \\\"\" + require(\"./package.json\").version + \"\\\"; export * from \\\"../index\\\"; export {version};\");' > build/bundle.js && rollup -f umd -n d3_color -o build/d3-color.js -- build/bundle.js",
    "test": "faucet `find test -name '*-test.js'` && eslint index.js src"
  },
  "version": "0.3.4"
}
