{
  "_args": [
    [
      {
        "raw": "d3-interpolate@~0.2.0",
        "scope": null,
        "escapedName": "d3-interpolate",
        "name": "d3-interpolate",
        "rawSpec": "~0.2.0",
        "spec": ">=0.2.0 <0.3.0",
        "type": "range"
      },
      "C:\\xampp\\htdocs\\BACHELOR\\bachelor\\node_modules\\d3-sankey-align"
    ]
  ],
  "_from": "d3-interpolate@>=0.2.0 <0.3.0",
  "_id": "d3-interpolate@0.2.1",
  "_inCache": true,
  "_location": "/d3-sankey-align/d3-interpolate",
  "_nodeVersion": "5.1.0",
  "_npmUser": {
    "name": "mbostock",
    "email": "mbostock@gmail.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "d3-interpolate@~0.2.0",
    "scope": null,
    "escapedName": "d3-interpolate",
    "name": "d3-interpolate",
    "rawSpec": "~0.2.0",
    "spec": ">=0.2.0 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/d3-sankey-align"
  ],
  "_resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-0.2.1.tgz",
  "_shasum": "0f0d7364e40ab5e7f2ebd010de1539c5e6711991",
  "_shrinkwrap": null,
  "_spec": "d3-interpolate@~0.2.0",
  "_where": "C:\\xampp\\htdocs\\BACHELOR\\bachelor\\node_modules\\d3-sankey-align",
  "author": {
    "name": "Mike Bostock",
    "url": "http://bost.ocks.org/mike"
  },
  "bugs": {
    "url": "https://github.com/d3/d3-interpolate/issues"
  },
  "dependencies": {
    "d3-color": "~0.3.2"
  },
  "description": "Interpolate numbers, colors, strings, arrays, objects, whatever!",
  "devDependencies": {
    "faucet": "0.0",
    "rollup": "0.20.5",
    "tape": "4",
    "uglify-js": "2"
  },
  "directories": {},
  "dist": {
    "shasum": "0f0d7364e40ab5e7f2ebd010de1539c5e6711991",
    "tarball": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-0.2.1.tgz"
  },
  "gitHead": "d8948188d96aaf2a43814cbbd3868623da4e6bc2",
  "homepage": "https://github.com/d3/d3-interpolate",
  "jsnext:main": "index",
  "keywords": [
    "d3",
    "interpolate",
    "interpolation"
  ],
  "license": "BSD-3-Clause",
  "main": "build/d3-interpolate.js",
  "maintainers": [
    {
      "name": "mbostock",
      "email": "mike@ocks.org"
    }
  ],
  "name": "d3-interpolate",
  "optionalDependencies": {},
  "readme": "# d3-interpolate\n\nThis module provides a variety of interpolation methods for blending between two values. Values may be numbers, colors, strings, arrays, or even deeply-nested objects. For example:\n\n```js\nvar i = d3_interpolate.number(10, 20);\ni(0.0); // 10\ni(0.2); // 12\ni(0.5); // 15\ni(1.0); // 20\n```\n\nThe returned function `i` is called an *interpolator*. Given a starting value *a* and an ending value *b*, it takes a parameter *t* in the domain [0, 1] and returns the corresponding interpolated value between *a* and *b*. An interpolator typically returns a value equivalent to *a* at *t* = 0 and a value equivalent to *b* at *t* = 1.\n\nYou can interpolate more than just numbers. To find the perceptual midpoint between steelblue and brown:\n\n```js\nd3_interpolate.lab(\"steelblue\", \"brown\")(0.5); // \"#8e5c6d\"\n```\n\nHere’s a more elaborate example demonstrating type inference used by [value](#value):\n\n```js\nvar i = d3_interpolate.value({colors: [\"red\", \"blue\"]}, {colors: [\"white\", \"black\"]});\ni(0.0); // {colors: [\"#ff0000\", \"#0000ff\"]}\ni(0.5); // {colors: [\"#ff8080\", \"#000080\"]}\ni(1.0); // {colors: [\"#ffffff\", \"#000000\"]}\n```\n\nNote that the generic value interpolator detects not only nested objects and arrays, but also color strings and numbers embedded in strings!\n\n## Installing\n\nIf you use NPM, `npm install d3-interpolate`. Otherwise, download the [latest release](https://github.com/d3/d3-interpolate/releases/latest). The released bundle supports AMD, CommonJS, and vanilla environments. Create a custom build using [Rollup](https://github.com/rollup/rollup) or your preferred bundler. You can also load directly from [d3js.org](https://d3js.org):\n\n```html\n<script src=\"https://d3js.org/d3-color.v0.3.min.js\"></script>\n<script src=\"https://d3js.org/d3-interpolate.v0.2.min.js\"></script>\n```\n\nIn a vanilla environment, a `d3_interpolate` global is exported. [Try d3-interpolate in your browser.](https://tonicdev.com/npm/d3-interpolate)\n\n## API Reference\n\n<a name=\"value\" href=\"#value\">#</a> d3_interpolate.<b>value</b>(<i>a</i>, <i>b</i>)\n\nReturns an interpolator between the two arbitrary values *a* and *b*. The interpolator implementation is based on the type of the end value *b*, using the following algorithm:\n\n1. If *b* is a [color](https://github.com/d3/d3-color#color), [rgb](#rgb) is used.\n2. If *b* is a string, [string](#string) is used.\n3. If *b* is an array, [array](#array) is used.\n4. If *b* is an object and not coercible to a number, [object](#object) is used.\n5. Otherwise, [number](#number) is used.\n\nBased on the chosen interpolator, *a* is coerced to a suitable corresponding type. The behavior of this method may be augmented to support additional types by pushing custom interpolator factories onto the [values](#values) array.\n\n<a name=\"number\" href=\"#number\">#</a> d3_interpolate.<b>number</b>(<i>a</i>, <i>b</i>)\n\nReturns an interpolator between the two numbers *a* and *b*. The returned interpolator is equivalent to:\n\n```js\nfunction interpolate(t) {\n  return a * (1 - t) + b * t;\n}\n```\n\nCaution: avoid interpolating to or from the number zero when the interpolator is used to generate a string. When very small values are stringified, they may be converted to scientific notation, which is an invalid attribute or style property value. For example, the number `0.0000001` is converted to the string `\"1e-7\"`. This is particularly noticeable with interpolating opacity. To avoid scientific notation, start or end the transition at 1e-6: the smallest value that is not stringified in scientific notation.\n\n<a name=\"round\" href=\"#round\">#</a> d3_interpolate.<b>round</b>(<i>a</i>, <i>b</i>)\n\nReturns an interpolator between the two numbers *a* and *b*; the interpolator is similar to [number](#number), except it will round the resulting value to the nearest integer.\n\n<a name=\"string\" href=\"#string\">#</a> d3_interpolate.<b>string</b>(<i>a</i>, <i>b</i>)\n\nReturns an interpolator between the two strings *a* and *b*. The string interpolator finds numbers embedded in *a* and *b*, where each number is of the form understood by JavaScript. A few examples of numbers that will be detected within a string: `-1`, `42`, `3.14159`, and `6.0221413e+23`.\n\nFor each number embedded in *b*, the interpolator will attempt to find a corresponding number in *a*. If a corresponding number is found, a numeric interpolator is created using [number](#number). The remaining parts of the string *b* are used as a template: the static parts of the string *b* remain constant for the interpolation, with the interpolated numeric values embedded in the template.\n\nFor example, if *a* is `\"300 12px sans-serif\"`, and *b* is `\"500 36px Comic-Sans\"`, two embedded numbers are found. The remaining static parts of the string are a space between the two numbers (`\" \"`), and the suffix (`\"px Comic-Sans\"`). The result of the interpolator at *t* = .5 is `\"400 24px Comic-Sans\"`.\n\n<a name=\"array\" href=\"#array\">#</a> d3_interpolate.<b>array</b>(<i>a</i>, <i>b</i>)\n\nReturns an interpolator between the two arrays *a* and *b*. Internally, an array template is created that is the same length in *b*. For each element in *b*, if there exists a corresponding element in *a*, a generic interpolator is created for the two elements using [value](#value). If there is no such element, the static value from *b* is used in the template. Then, for the given parameter *t*, the template’s embedded interpolators are evaluated. The updated array template is then returned.\n\nFor example, if *a* is the array `[0, 1]` and *b* is the array `[1, 10, 100]`, then the result of the interpolator for *t* = .5 is the array `[.5, 5.5, 100]`.\n\nNote: **no defensive copy** of the template array is created; modifications of the returned array may adversely affect subsequent evaluation of the interpolator. No copy is made for performance reasons; interpolators are often part of the inner loop of [animated transitions](https://github.com/d3/d3-transition).\n\n<a name=\"object\" href=\"#object\">#</a> d3_interpolate.<b>object</b>(<i>a</i>, <i>b</i>)\n\nReturns an interpolator between the two objects *a* and *b*. Internally, an object template is created that has the same properties as *b*. For each property in *b*, if there exists a corresponding property in *a*, a generic interpolator is created for the two elements using [value](#value). If there is no such property, the static value from *b* is used in the template. Then, for the given parameter *t*, the template's embedded interpolators are evaluated and the updated object template is then returned.\n\nFor example, if *a* is the object `{x: 0, y: 1}` and *b* is the object `{x: 1, y: 10, z: 100}`, the result of the interpolator for *t* = .5 is the object `{x: .5, y: 5.5, z: 100}`.\n\nObject interpolation is particularly useful for *dataspace interpolation*, where data is interpolated rather than attribute values. For example, you can interpolate an object which describes an arc in a pie chart, and then use d3.svg.arc to compute the new SVG path data.\n\nNote: **no defensive copy** of the template object is created; modifications of the returned object may adversely affect subsequent evaluation of the interpolator. No copy is made for performance reasons; interpolators are often part of the inner loop of [animated transitions](https://github.com/d3/d3-transition).\n\n<a name=\"transform\" href=\"#transform\">#</a> d3_interpolate.<b>transform</b>(<i>a</i>, <i>b</i>)\n\nReturns an interpolator between the two 2D affine transforms represented by *a* and *b*. Each transform is decomposed to a standard representation of translate, rotate, *x*-skew and scale; these component transformations are then interpolated. This behavior is standardized by CSS: see [matrix decomposition for animation](http://www.w3.org/TR/css3-2d-transforms/#matrix-decomposition).\n\n<a name=\"zoom\" href=\"#zoom\">#</a> d3_interpolate.<b>zoom</b>(<i>a</i>, <i>b</i>)\n\nReturns an interpolator between the two views *a* and *b* of a two-dimensional plane, based on [“Smooth and efficient zooming and panning”](https://www.google.com/search?q=Smooth+and+efficient+zooming+and+panning) by Jarke J. van Wijk and Wim A.A. Nuij. Each view is defined as an array of three numbers: *cx*, *cy* and *width*. The first two coordinates *cx*, *cy* represent the center of the viewport; the last coordinate *width* represents the size of the viewport.\n\nThe returned interpolator exposes a *duration* property which encodes the recommended transition duration in milliseconds. This duration is based on the path length of the curved trajectory through *x,y* space. If you want to a slower or faster transition, multiply this by an arbitrary scale factor (<i>V</i> as described in the original paper).\n\n<a name=\"values\" href=\"#values\">#</a> d3_interpolate.<b>values</b>\n\nThe array of built-in interpolator factories, as used by [value](#value). Additional interpolator factories may be pushed onto the end of this array. Each factory should return an interpolator if it supports interpolating the two specified input values; otherwise, the factory should return a falsey value and other interpolators will be tried.\n\nFor example, to register a custom interpolator that formats dollars and cents, you might say:\n\n```js\nd3_interpolate.values.push(function(a, b) {\n  var re = /^\\$([0-9,.]+)$/, ma, mb, f = d3.format(\",.02f\");\n  if ((ma = re.exec(a)) && (mb = re.exec(b))) {\n    a = parseFloat(ma[1]);\n    b = parseFloat(mb[1]) - a;\n    return function(t) {\n      return \"$\" + f(a + b * t);\n    };\n  }\n});\n```\n\nSubsequently, `d3_interpolate.value(\"$20\", \"$10\")(1/3)` returns `$16.67`.\n\n<a name=\"rgb\" href=\"#rgb\">#</a> d3_interpolate.<b>rgb</b>(<i>a</i>, <i>b</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/rgb.png\" width=\"100%\" height=\"80\" alt=\"rgb\">\n\nReturns an RGB color space interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in RGB; they will be converted to RGB using [color.rgb](https://github.com/d3/d3-color#rgb). The return value of the interpolator is a hexadecimal RGB string.\n\n<a name=\"hsl\" href=\"#hsl\">#</a> d3_interpolate.<b>hsl</b>(<i>a</i>, <i>b</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/hsl.png\" width=\"100%\" height=\"80\" alt=\"hsl\">\n\nReturns an HSL color space interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in HSL; they will be converted to HSL using [color.hsl](https://github.com/d3/d3-color#hsl). If either color’s hue or saturation is NaN, the opposing color’s channel value is used. The shortest path between hues is used. The return value of the interpolator is a hexadecimal RGB string.\n\n<a name=\"hslLong\" href=\"#hslLong\">#</a> d3_interpolate.<b>hslLong</b>(<i>a</i>, <i>b</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/hslLong.png\" width=\"100%\" height=\"80\" alt=\"hslLong\">\n\nLike [hsl](#hsl), but does not use the shortest path between hues.\n\n<a name=\"lab\" href=\"#lab\">#</a> d3_interpolate.<b>lab</b>(<i>a</i>, <i>b</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/lab.png\" width=\"100%\" height=\"80\" alt=\"lab\">\n\nReturns a Lab color space interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in Lab; they will be converted to Lab using [color.lab](https://github.com/d3/d3-color#lab). The return value of the interpolator is a hexadecimal RGB string.\n\n<a name=\"hcl\" href=\"#hcl\">#</a> d3_interpolate.<b>hcl</b>(<i>a</i>, <i>b</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/hcl.png\" width=\"100%\" height=\"80\" alt=\"hcl\">\n\nReturns an HCL color space interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in HCL; they will be converted to HCL using [color.hcl](https://github.com/d3/d3-color#hcl). If either color’s hue or chroma is NaN, the opposing color’s channel value is used. The shortest path between hues is used. The return value of the interpolator is a hexadecimal RGB string.\n\n<a name=\"hclLong\" href=\"#hclLong\">#</a> d3_interpolate.<b>hclLong</b>(<i>a</i>, <i>b</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/hclLong.png\" width=\"100%\" height=\"80\" alt=\"hclLong\">\n\nLike [hcl](#hcl), but does not use the shortest path between hues.\n\n<a name=\"cubehelix\" href=\"#cubehelix\">#</a> d3_interpolate.<b>cubehelix</b>(<i>a</i>, <i>b</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/cubehelix.png\" width=\"100%\" height=\"80\" alt=\"cubehelix\">\n\nReturns a Cubehelix color space interpolator between the two colors *a* and *b* using the default *gamma* of 1.0. The colors *a* and *b* need not be in Cubehelix; they will be converted to Cubehelix using [color.cubehelix](https://github.com/d3/d3-color#cubehelix). If either color’s hue or saturation is NaN, the opposing color’s channel value is used. The shortest path between hues is used. The return value of the interpolator is a hexadecimal RGB string.\n\n<a name=\"cubehelixLong\" href=\"#cubehelixLong\">#</a> d3_interpolate.<b>cubehelixLong</b>(<i>a</i>, <i>b</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/cubehelixLong.png\" width=\"100%\" height=\"80\" alt=\"cubehelixLong\">\n\nLike [cubehelix](#cubehelix), but does not use the shortest path between hues.\n\n<a name=\"cubehelixGamma\" href=\"#cubehelixGamma\">#</a> d3_interpolate.<b>cubehelixGamma</b>(<i>gamma</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/cubehelixGamma.png\" width=\"100%\" height=\"80\" alt=\"cubehelixGamma\">\n\nReturns a Cubehelix color space interpolator factory using the specified *gamma*. A gamma value less than one emphasizes low intensity values, while a gamma value greater than one emphasizes high intensity values. For example:\n\n```js\nvar i = d3_interpolate.cubehelixGamma(3)(\"purple\", \"orange\");\n```\n\n<a name=\"cubehelixGammaLong\" href=\"#cubehelixGammaLong\">#</a> d3_interpolate.<b>cubehelixGammaLong</b>(<i>gamma</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/cubehelixGammaLong.png\" width=\"100%\" height=\"80\" alt=\"cubehelixGammaLong\">\n\nLike [cubehelixGamma](#cubehelixGamma), but does not use the shortest path between hues.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/d3/d3-interpolate.git"
  },
  "scripts": {
    "prepublish": "npm run test && uglifyjs build/d3-interpolate.js -c -m -o build/d3-interpolate.min.js && rm -f build/d3-interpolate.zip && zip -j build/d3-interpolate.zip -- LICENSE README.md build/d3-interpolate.js build/d3-interpolate.min.js",
    "pretest": "mkdir -p build && node -e 'process.stdout.write(\"var version = \\\"\" + require(\"./package.json\").version + \"\\\"; export * from \\\"../index\\\"; export {version};\");' > build/bundle.js && rollup -f umd -g d3-color:d3_color -u d3-interpolate -n d3_interpolate -o build/d3-interpolate.js -- build/bundle.js",
    "test": "faucet `find test -name '*-test.js'`"
  },
  "version": "0.2.1"
}
